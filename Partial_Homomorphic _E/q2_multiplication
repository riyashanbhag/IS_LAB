# ✅ ANSWER TO: "Utilize the multiplicative homomorphic property of RSA encryption.
# Implement a basic RSA encryption scheme in Python. Encrypt two integers (e.g., 7 and 3),
# perform multiplication on the encrypted integers without decrypting them,
# and verify that the decrypted result equals the product of the original integers."

import random
from math import gcd

#-----------
# Function to find modular inverse
def modinv(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None
#-----------------------
#geerate RSA keys
def generate_keys():
    # Two prime numbers (for simplicity, small primes used here)
    p = 61
    q = 53
    n = p * q
    phi = (p - 1) * (q - 1)

    # Choose e such that gcd(e, phi) = 1
    e = 17  # commonly used small prime exponent
    while gcd(e, phi) != 1:
        e = random.randint(2, phi - 1)

    # Compute private key d
    d = modinv(e, phi)
    return (e, d, n)

#-----------------
# RSA Encryption
def encrypt(m, e, n):
    return pow(m, e, n)

# RSA Decryption
def decrypt(c, d, n):
    return pow(c, d, n)
#---------------------


#---------------
#Main program

if __name__=="__main__":
    e, d, n = generate_keys()
    print("Public Key (e, n):", (e, n))
    print("Private Key (d, n):", (d, n))
    # Original integers
    m1 = 7
    m2 = 3
    print(f"\nOriginal Integers: m1 = {m1}, m2 = {m2}")

    # Encrypt the two integers
    c1=encrypt(m1,e,n)
    c2 =encrypt(m2, e, n)
    print(f"Ciphertexts: c1 = {c1}, c2 = {c2}")

    # Perform multiplication on encrypted values
    # (Homomorphic property: E(m1) * E(m2) mod n = E(m1 * m2))
    encrypted_product = (c1 * c2) % n
    print(f"\nEncrypted Multiplication Result: {encrypted_product}")

    decrypted_product=decrypt(encrypted_product,d,n)
    print(f"Decrypted Result: {decrypted_product}")
    # Verification
    print(f"Expected Product (m1 * m2): {m1 * m2}")
    if decrypted_product == m1 * m2:
        print("\n✅ Homomorphic property verified successfully!")
    else:
        print("\n❌ Verification failed.")
